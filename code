import NumPy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
data = pd.read_csv("/content/drive/MyDrive/austin_weather.csv")

from google.colab import drive
drive.mount('/content/drive')
data.head()
data.describe()
data = data.drop(
    ['Events', 'Date', 'SeaLevelPressureHighInches', 'SeaLevelPressureLowInches'], axis=1)
data = data.replace('T', 0.0)
data = data.replace('-', 0.0)
# Save the data in a csv file
data.to_csv('austin_final.csv')





data.info(),data['PrecipitationSumInches'].describe()
X = data.drop(['PrecipitationSumInches'], axis=1)

Y = data['PrecipitationSumInches'].values.astype('float32')
Y = Y.reshape(-1, 1)
day_index = 798
days = [i for i in range(Y.size)]
#print(days)
pip install catboost
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import r2_score as r2
import xgboost as xg 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import mean_squared_error as MSE 
from catboost import CatBoostRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from keras.models import Sequential
from keras.models import load_model
from keras.layers import Dense
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import mean_absolute_error as MAE
from sklearn.metrics import accuracy_score

def SVMRegressor(X,y,k=10):
    scores=[]
    mse=[]
    mae=[]
    for i in range(k):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=0)
        reg = SVR()
        reg.fit(X_train,y_train)
        y_pred=reg.predict(X_test)
        scores.append(r2(y_test,y_pred))
        mse.append(MSE(y_test,y_pred))
        mae.append(MAE(y_test,y_pred))
    fig ,ax =plt.subplots()
    ax.scatter(y_test,y_pred,edgecolors=(0,0,0))
    ax.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()],'k--',lw=4)
    ax.set_label('Actual')
    ax.set_label('Predicted')
    plt.title('Test data viz (SVR)')
    plt.show()
    return scores,mse,mse
    
print("Support Vector Machine Regressor")
svr,svrmse,svrmae=SVMRegressor(X,Y)
print("R2 score: " +str(sum(svr)/len(svr)))
print("MSE: "+str(sum(svrmse)/len(svrmse)))
print("MAE: "+str(sum(svrmae)/len(svrmae)))
def RF(X,y,k=10):

    scores=[]
    mse=[]
    mae=[]
    for i in range(k):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=0)
        reg = RandomForestRegressor(max_depth=4, random_state=0)
        reg.fit(X_train,y_train)
        y_pred=reg.predict(X_test)
        scores.append(r2(y_test,y_pred))
        mse.append(MSE(y_test,y_pred))
        mae.append(MAE(y_test,y_pred))
    fig ,ax =plt.subplots()
    ax.scatter(y_test,y_pred,edgecolors=(0,0,0))
  
ax.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()],'k--',lw=4)
    ax.set_label('Actual')
    ax.set_label('Predicted')
    plt.title('Test data viz (RF)')
    plt.show()
    return scores,mse,mse
print("Random Forest Regressor")
rf,rfmse,rfmae=RF(X,Y)
print("R2 score: " +str(sum(rf)/len(rf)))
print("MSE: "+str(sum(rfmse)/len(rfmse)))
print("MAE: "+str(sum(rfmae)/len(rfmae)))
def Catboost(X,y,k=10):
    acc=[]
    scores=[]
    mse=[]
    mae=[]
    for i in range(k):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=0)
        model=CatBoostRegressor(iterations=100, depth=10, learning_rate=0.01,verbose=False, loss_function='RMSE')
        model.fit(X_train,y_train ,plot=False)
        y_pred=model.predict(X_test)
        scores.append(r2(y_test,y_pred))
        mse.append(MSE(y_test,y_pred))
        mae.append(MAE(y_test,y_pred))
    fig ,ax =plt.subplots()
    ax.scatter(y_test,y_pred,edgecolors=(0,0,0))
 ax.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()],'k--',lw=4)
    ax.set_label('Actual')
    ax.set_label('Predicted')
    plt.show()
    return scores,mse,mse
print("CatBoost Regressor")
cb,cbmse,cbmae=Catboost(X,Y)
print("R2 score : " +str(sum(cb)/len(cb)))
print("MSE: "+str(sum(cbmse)/len(cbmse)))
print("MAE: "+str(sum(cbmae)/len(cbmae)))




